//-----------------------------
// Title: Tempcontrol
//-----------------------------
// Purpose: This program measures the ambient temperature, compares it to the
//	    set temperature, and determines if heating or cooling should be
//	    enabled.
// Dependencies: AssemblyConfig.inc
// Compiler: MPLAB X IDE v6.20
// Author: Marcus Serrano 
// OUTPUTS: PORT D 1 & 2; connected to heating, cooling and an LED for each output. 
// INPUTS: Set temperatures via keypad, and measured temperature via thermistor.
// Versions:
//  	V1.0: 3/4/2024 - First version 
//  	V1.1: 3/5/2024 - First sucessful compiling, and debugging.
//      V1.2: 3/6/2024 - program functions but decimal output does not work.
//	V1.3: 3/7/2024 - program functions but decimal output still not working.
//      V1.4: 3/10/2024 - Fixed decimal conversion.
//	V1.5: 3/11/2024 - Fixed input viability calculator. **PROJECT COMPLETE**    
//-----------------------------

//----------------
// Program Initialization via file inclusion and memory initialization.
//----------------
#include "C:\Users\Marcus Serrano\Desktop\PIC\MPLAB\Tempcontrol.X\AssemblyConfig.inc"
#include <xc.inc>

ORG 0X20
PSECT absdata,abs,ovrld        ; Do not change
movlw 0x0
movwf TRISD

//----------------
// REGISTERS
//----------------
measuredTempReg	    equ	0x21 ; thermistor measured temperature location
refTempReg	    equ	0x20 ; reference temperature in HEX, between +10 and +50c
contReg		    equ	0x22 ; control register location

//----------------
// PROGRAM INPUTS
//----------------
#define measuredTemp 30 ; this is the input value in decimal [-20 - +60]
#define refTemp	15 ; this is the input value in decimal [+10 - +50]  
    
//----------------
// PROGRAM OUTPUTS
//----------------
#define cooler		PORTD,2 ;cooler is set to portD2
#define heater		PORTD,1 ;heater is set to portD1

//----------------
// WRITE INPUTS TO REGISTERS	
//----------------
    movlw measuredTemp
    movwf measuredTempReg,0
    movlw refTemp
    movwf refTempReg,0
       
//----------------
// INPUT VIABILITY
//----------------    
   
//VERIFY IF MEASUREDTEMP IS BELOW 60
    movlw 60
    subwf measuredTempReg ;[measuredTemp - 60]
    bnn ending ;branch if result is non negative i.e. measuredtemp exceeds upper limit of 50.

//VERIFY IF REFTEMP IS BELOW 50
    movlw 50
    subwf refTempReg ; refTemp - 50
    bnn ending

//VERIFY THAT MEASUREDTEMP IS ABOVE -20
    movlw measuredTemp
    addlw 20
    bn ending ;end program if measuredtemp is less than -20
    
//VERIFY THAT REFTEMP IS ABOVE 10
    movlw 10
    sublw refTemp
    bn ending

//----------------
// STORE NIBBLES OF INPUTS IN REGISTERS.
//----------------

// CONVERT MEASUREDTEMP INTO DECIMAL AND STORE IN REGISTERS
 nume equ measuredTempReg	; RAM location for measuredtemp
 qu equ 0x40			; RAM location for Quotient
 rmnd_l equ 0x70		; Digit 3 of decimal result
 rmnd_m equ 0x71		; Digit 2 of decimal result
 rmnd_h equ 0x72		; Digit 1 of decimal result
 mynum equ measuredTemp
 myden equ 10			; denominator
 
 movlw mynum			;wreg = measuredTemp, the numerator
 movwf nume			;load numerator
 movlw myden			;WREG = 10, the denominator
 clrf qu,1			;clear quotient
 
 d_1:
    incf qu,1			;increment quotient for every subtraction
    subwf nume			;nume - wreg
    bc d_1  			;if positive, branch (c = 1 for positive)
    addwf nume
    decf qu,1
    movff nume,rmnd_l		;store first digit
    movff qu,nume
    clrf qu			;clear quotient
    
 d_2:
    incf qu,1
    subwf nume
    bc d_2
    addwf nume
    decf qu,1
    movff nume,rmnd_m
    movff qu,rmnd_h
    
 // CONVERT REFTEMP INTO DECIMAL AND STORE IN REGISTERS
 nume2 equ refTempReg	; RAM location for reftemp
 qu2 equ 0x41			; RAM location for Quotient
 rmnd_l2 equ 0x60		; Digit 3 of decimal result
 rmnd_m2 equ 0x61		; Digit 2 of decimal result
 rmnd_h2 equ 0x62		; Digit 1 of decimal result
 mynum2 equ refTemp
 myden2 equ 10			; denominator
 
 movlw mynum2			;wreg = refTemp, the numerator
 movwf nume2			;load numerator
 movlw myden2			;WREG = 10, the denominator
 clrf qu2,1			;clear quotient
 
 d_3:
    incf qu2,1			;increment quotient for every subtraction
    subwf nume2			;nume - wreg
    bc d_3  			;if positive, branch (c = 1 for positive)
    addwf nume2
    decf qu2,1
    movff nume2,rmnd_l2		;store first digit
    movff qu2,nume2
    clrf qu2			;clear quotient
    
 d_4:
    incf qu2,1
    subwf nume2
    bc d_4
    addwf nume2
    decf qu2,1
    movff nume2,rmnd_m2
    movff qu2,rmnd_h2
      
//----------------
// LOGIC
//----------------
   
  GOTO  logic1
    
    logic1: ;reftemp[f]>measuredtemp[f] goto heat
    movlw measuredTemp
    cpfsgt refTempReg,1 
    goto logic2;SKIP IF ref>meas
    goto heat
    
    logic2:;reftemp[f]<measuredtemp[f] goto cool
    movlw measuredTemp
    cpfslt refTempReg,1 
    goto ending;SKIP IF ref<meas
    goto cool
    
    cool:
    movlw 0x02
    movwf contReg,1   
    movlw 0x04
    movwf PORTD
    goto ending
    
    
    heat:
    movlw 0x01
    movwf contReg,1
    movlw 0x02
    movwf PORTD
    goto ending
   
    ending:
    end
